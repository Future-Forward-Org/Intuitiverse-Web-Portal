enum TaskBehavior {
  OPEN_IN_TAB
  OPEN_IN_PLACE
  OPEN_IN_IFRAME
  OPEN_FORM
}

enum RoleEnum {
  ADMIN
  HOST
  STUDENT
  ARCTIC_DRY_RUN
  VIRTUADCAST_PILOT_STUDENT
  VIRTUADCAST_PILOT_TRAINER
}

enum Language {
  CHINESE
  DANISH
  DUTCH
  ENGLISH
  FINNISH
  FRENCH
  GERMAN
  SPANISH
  JAPANESE
  NORWEGIAN
  PORTUGUESE
  BRAZILIAN_PORTUGUESE
  SWEDISH
  ITALIAN
}

type Session @model @auth(rules: [{allow: public}]) {
  id: ID!
  name: String!
  description: String
  startDateTime: AWSDateTime!
  endDateTime: AWSDateTime!
  sessionCode: String!
  host: User! @hasOne
  attendees: [User] @manyToMany(relationName: "SessionUserAttendees")
}

type TaskStatus @model @auth(rules: [{allow: public}]) {
  id: ID!
  user: User @hasOne
  Progress: String
  taskID: ID! @index(name: "byTask")
  isEnabled: Boolean
}

type Role @model @auth(rules: [{allow: public}]) {
  id: ID!
  displayName: String!
  name: RoleEnum!
  users: [User] @manyToMany(relationName: "UserRole")
  apps: [App] @manyToMany(relationName: "AppRole")
}

type DeviceGrantParams {
  expiration: Int
}

type MagicCode @model @auth(rules: [{allow: public}]) {
  id: ID!
  parameters: DeviceGrantParams
  titleText: String!
  descriptionText: String
  apiAlias: String!
  apiResource: String!
}

type User @model @auth(rules: [{allow: public}]) {
  id: ID!
  userName: String
  apps: [App] @manyToMany(relationName: "AppUser")
  roles: [Role] @manyToMany(relationName: "UserRole")
  sessions: [Session] @manyToMany(relationName: "SessionUserAttendees")
  firstName: String
  lastName: String
  avatarImageURL: String
  avatarUrl: String
  email: AWSEmail!
  cognitoId: ID!
  avatarKey: String
  language: Language!
  avatarUploaded: Boolean
}

type App @model @auth(rules: [{allow: public}]) {
  id: ID!
  name: String!
  users: [User] @manyToMany(relationName: "AppUser")
  tasks: [Task] @hasMany(indexName: "byApp", fields: ["id"])
  magicCode: MagicCode @hasOne
  description: String
  buttonName: String
  roles: [Role!] @manyToMany(relationName: "AppRole")
}

type Task @model @auth(rules: [{allow: public}]) {
  id: ID!
  type: String
  name: String!
  buttonName: String
  requiredRole: [RoleEnum!]
  url: AWSURL
  order: Int
  taskBehavior: TaskBehavior!
  appendUserID: Boolean
  appendTaskID: Boolean
  appID: ID! @index(name: "byApp")
  taskStatuses: [TaskStatus] @hasMany(indexName: "byTask", fields: ["id"])
}
 